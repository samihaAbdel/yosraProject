{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { merge } from './merge';\nexport function mergeWith() {\n  var otherSources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherSources[_i] = arguments[_i];\n  }\n  return merge.apply(void 0, __spreadArray([], __read(otherSources)));\n}","map":{"version":3,"names":["merge","mergeWith","otherSources","_i","arguments","length","apply","__spreadArray","__read"],"sources":["C:\\Users\\samka\\OneDrive\\Bureau\\My-Mern-Backend\\client\\node_modules\\rxjs\\src\\internal\\operators\\mergeWith.ts"],"sourcesContent":["import { ObservableInputTuple, OperatorFunction } from '../types';\r\nimport { merge } from './merge';\r\n\r\n/**\r\n * Merge the values from all observables to a single observable result.\r\n *\r\n * Creates an observable, that when subscribed to, subscribes to the source\r\n * observable, and all other sources provided as arguments. All values from\r\n * every source are emitted from the resulting subscription.\r\n *\r\n * When all sources complete, the resulting observable will complete.\r\n *\r\n * When any source errors, the resulting observable will error.\r\n *\r\n * ## Example\r\n *\r\n * Joining all outputs from multiple user input event streams\r\n *\r\n * ```ts\r\n * import { fromEvent, map, mergeWith } from 'rxjs';\r\n *\r\n * const clicks$ = fromEvent(document, 'click').pipe(map(() => 'click'));\r\n * const mousemoves$ = fromEvent(document, 'mousemove').pipe(map(() => 'mousemove'));\r\n * const dblclicks$ = fromEvent(document, 'dblclick').pipe(map(() => 'dblclick'));\r\n *\r\n * mousemoves$\r\n *   .pipe(mergeWith(clicks$, dblclicks$))\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // result (assuming user interactions)\r\n * // 'mousemove'\r\n * // 'mousemove'\r\n * // 'mousemove'\r\n * // 'click'\r\n * // 'click'\r\n * // 'dblclick'\r\n * ```\r\n *\r\n * @see {@link merge}\r\n *\r\n * @param otherSources the sources to combine the current source with.\r\n * @return A function that returns an Observable that merges the values from\r\n * all given Observables.\r\n */\r\nexport function mergeWith<T, A extends readonly unknown[]>(\r\n  ...otherSources: [...ObservableInputTuple<A>]\r\n): OperatorFunction<T, T | A[number]> {\r\n  return merge(...otherSources);\r\n}\r\n"],"mappings":";AACA,SAASA,KAAK,QAAQ,SAAS;AA2C/B,OAAM,SAAUC,SAASA,CAAA;EACvB,IAAAC,YAAA;OAAA,IAAAC,EAAA,IAA6C,EAA7CA,EAAA,GAAAC,SAAA,CAAAC,MAA6C,EAA7CF,EAAA,EAA6C;IAA7CD,YAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EAEA,OAAOH,KAAK,CAAAM,KAAA,SAAAC,aAAA,KAAAC,MAAA,CAAIN,YAAY;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}