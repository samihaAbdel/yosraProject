{"ast":null,"code":"import { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\nimport { innerFrom } from '../observable/innerFrom';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return function (source) {\n      return concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n    };\n  }\n  return mergeMap(function (value, index) {\n    return innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value));\n  });\n}","map":{"version":3,"names":["concat","take","ignoreElements","mapTo","mergeMap","innerFrom","delayWhen","delayDurationSelector","subscriptionDelay","source","pipe","value","index"],"sources":["C:\\Users\\samka\\OneDrive\\Bureau\\My-Mern-Backend\\client\\node_modules\\rxjs\\src\\internal\\operators\\delayWhen.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\r\nimport { concat } from '../observable/concat';\r\nimport { take } from './take';\r\nimport { ignoreElements } from './ignoreElements';\r\nimport { mapTo } from './mapTo';\r\nimport { mergeMap } from './mergeMap';\r\nimport { innerFrom } from '../observable/innerFrom';\r\n\r\n/** @deprecated The `subscriptionDelay` parameter will be removed in v8. */\r\nexport function delayWhen<T>(\r\n  delayDurationSelector: (value: T, index: number) => ObservableInput<any>,\r\n  subscriptionDelay: Observable<any>\r\n): MonoTypeOperatorFunction<T>;\r\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => ObservableInput<any>): MonoTypeOperatorFunction<T>;\r\n\r\n/**\r\n * Delays the emission of items from the source Observable by a given time span\r\n * determined by the emissions of another Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\r\n * delay duration is determined by a second Observable.</span>\r\n *\r\n * ![](delayWhen.png)\r\n *\r\n * `delayWhen` operator shifts each emitted value from the source Observable by\r\n * a time span determined by another Observable. When the source emits a value,\r\n * the `delayDurationSelector` function is called with the value emitted from\r\n * the source Observable as the first argument to the `delayDurationSelector`.\r\n * The `delayDurationSelector` function should return an {@link ObservableInput},\r\n * that is internally converted to an Observable that is called the \"duration\"\r\n * Observable.\r\n *\r\n * The source value is emitted on the output Observable only when the \"duration\"\r\n * Observable emits ({@link guide/glossary-and-semantics#next next}s) any value.\r\n * Upon that, the \"duration\" Observable gets unsubscribed.\r\n *\r\n * Before RxJS V7, the {@link guide/glossary-and-semantics#complete completion}\r\n * of the \"duration\" Observable would have been triggering the emission of the\r\n * source value to the output Observable, but with RxJS V7, this is not the case\r\n * anymore.\r\n *\r\n * Only next notifications (from the \"duration\" Observable) trigger values from\r\n * the source Observable to be passed to the output Observable. If the \"duration\"\r\n * Observable only emits the complete notification (without next), the value\r\n * emitted by the source Observable will never get to the output Observable - it\r\n * will be swallowed. If the \"duration\" Observable errors, the error will be\r\n * propagated to the output Observable.\r\n *\r\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\r\n * is an Observable. When `subscriptionDelay` emits its first value or\r\n * completes, the source Observable is subscribed to and starts behaving like\r\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\r\n * `delayWhen` will subscribe to the source Observable as soon as the output\r\n * Observable is subscribed.\r\n *\r\n * ## Example\r\n *\r\n * Delay each click by a random amount of time, between 0 and 5 seconds\r\n *\r\n * ```ts\r\n * import { fromEvent, delayWhen, interval } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const delayedClicks = clicks.pipe(\r\n *   delayWhen(() => interval(Math.random() * 5000))\r\n * );\r\n * delayedClicks.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link delay}\r\n * @see {@link throttle}\r\n * @see {@link throttleTime}\r\n * @see {@link debounce}\r\n * @see {@link debounceTime}\r\n * @see {@link sample}\r\n * @see {@link sampleTime}\r\n * @see {@link audit}\r\n * @see {@link auditTime}\r\n *\r\n * @param delayDurationSelector A function that returns an `ObservableInput` for\r\n * each `value` emitted by the source Observable, which is then used to delay the\r\n * emission of that `value` on the output Observable until the `ObservableInput`\r\n * returned from this function emits a next value. When called, beside `value`,\r\n * this function receives a zero-based `index` of the emission order.\r\n * @param subscriptionDelay An Observable that triggers the subscription to the\r\n * source Observable once it emits any value.\r\n * @return A function that returns an Observable that delays the emissions of\r\n * the source Observable by an amount of time specified by the Observable\r\n * returned by `delayDurationSelector`.\r\n */\r\nexport function delayWhen<T>(\r\n  delayDurationSelector: (value: T, index: number) => ObservableInput<any>,\r\n  subscriptionDelay?: Observable<any>\r\n): MonoTypeOperatorFunction<T> {\r\n  if (subscriptionDelay) {\r\n    // DEPRECATED PATH\r\n    return (source: Observable<T>) =>\r\n      concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\r\n  }\r\n\r\n  return mergeMap((value, index) => innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)));\r\n}\r\n"],"mappings":"AAEA,SAASA,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,SAAS,QAAQ,yBAAyB;AAoFnD,OAAM,SAAUC,SAASA,CACvBC,qBAAwE,EACxEC,iBAAmC;EAEnC,IAAIA,iBAAiB,EAAE;IAErB,OAAO,UAACC,MAAqB;MAC3B,OAAAT,MAAM,CAACQ,iBAAiB,CAACE,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC,EAAEC,cAAc,EAAE,CAAC,EAAEO,MAAM,CAACC,IAAI,CAACJ,SAAS,CAACC,qBAAqB,CAAC,CAAC,CAAC;IAAxG,CAAwG;;EAG5G,OAAOH,QAAQ,CAAC,UAACO,KAAK,EAAEC,KAAK;IAAK,OAAAP,SAAS,CAACE,qBAAqB,CAACI,KAAK,EAAEC,KAAK,CAAC,CAAC,CAACF,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC,EAAEE,KAAK,CAACQ,KAAK,CAAC,CAAC;EAA1E,CAA0E,CAAC;AAC/G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}