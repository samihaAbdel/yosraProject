{"ast":null,"code":"import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { defer } from './defer';\nvar DEFAULT_CONFIG = {\n  connector: function () {\n    return new Subject();\n  },\n  resetOnDisconnect: true\n};\nexport function connectable(source, config) {\n  if (config === void 0) {\n    config = DEFAULT_CONFIG;\n  }\n  var connection = null;\n  var connector = config.connector,\n    _a = config.resetOnDisconnect,\n    resetOnDisconnect = _a === void 0 ? true : _a;\n  var subject = connector();\n  var result = new Observable(function (subscriber) {\n    return subject.subscribe(subscriber);\n  });\n  result.connect = function () {\n    if (!connection || connection.closed) {\n      connection = defer(function () {\n        return source;\n      }).subscribe(subject);\n      if (resetOnDisconnect) {\n        connection.add(function () {\n          return subject = connector();\n        });\n      }\n    }\n    return connection;\n  };\n  return result;\n}","map":{"version":3,"names":["Subject","Observable","defer","DEFAULT_CONFIG","connector","resetOnDisconnect","connectable","source","config","connection","_a","subject","result","subscriber","subscribe","connect","closed","add"],"sources":["C:\\Users\\samka\\OneDrive\\Bureau\\My-Mern-Backend\\client\\node_modules\\rxjs\\src\\internal\\observable\\connectable.ts"],"sourcesContent":["import { Connectable, ObservableInput, SubjectLike } from '../types';\r\nimport { Subject } from '../Subject';\r\nimport { Subscription } from '../Subscription';\r\nimport { Observable } from '../Observable';\r\nimport { defer } from './defer';\r\n\r\nexport interface ConnectableConfig<T> {\r\n  /**\r\n   * A factory function used to create the Subject through which the source\r\n   * is multicast. By default this creates a {@link Subject}.\r\n   */\r\n  connector: () => SubjectLike<T>;\r\n  /**\r\n   * If true, the resulting observable will reset internal state upon disconnection\r\n   * and return to a \"cold\" state. This allows the resulting observable to be\r\n   * reconnected.\r\n   * If false, upon disconnection, the connecting subject will remain the\r\n   * connecting subject, meaning the resulting observable will not go \"cold\" again,\r\n   * and subsequent repeats or resubscriptions will resubscribe to that same subject.\r\n   */\r\n  resetOnDisconnect?: boolean;\r\n}\r\n\r\n/**\r\n * The default configuration for `connectable`.\r\n */\r\nconst DEFAULT_CONFIG: ConnectableConfig<unknown> = {\r\n  connector: () => new Subject<unknown>(),\r\n  resetOnDisconnect: true,\r\n};\r\n\r\n/**\r\n * Creates an observable that multicasts once `connect()` is called on it.\r\n *\r\n * @param source The observable source to make connectable.\r\n * @param config The configuration object for `connectable`.\r\n * @returns A \"connectable\" observable, that has a `connect()` method, that you must call to\r\n * connect the source to all consumers through the subject provided as the connector.\r\n */\r\nexport function connectable<T>(source: ObservableInput<T>, config: ConnectableConfig<T> = DEFAULT_CONFIG): Connectable<T> {\r\n  // The subscription representing the connection.\r\n  let connection: Subscription | null = null;\r\n  const { connector, resetOnDisconnect = true } = config;\r\n  let subject = connector();\r\n\r\n  const result: any = new Observable<T>((subscriber) => {\r\n    return subject.subscribe(subscriber);\r\n  });\r\n\r\n  // Define the `connect` function. This is what users must call\r\n  // in order to \"connect\" the source to the subject that is\r\n  // multicasting it.\r\n  result.connect = () => {\r\n    if (!connection || connection.closed) {\r\n      connection = defer(() => source).subscribe(subject);\r\n      if (resetOnDisconnect) {\r\n        connection.add(() => (subject = connector()));\r\n      }\r\n    }\r\n    return connection;\r\n  };\r\n\r\n  return result;\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,YAAY;AAEpC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,KAAK,QAAQ,SAAS;AAsB/B,IAAMC,cAAc,GAA+B;EACjDC,SAAS,EAAE,SAAAA,CAAA;IAAM,WAAIJ,OAAO,EAAW;EAAtB,CAAsB;EACvCK,iBAAiB,EAAE;CACpB;AAUD,OAAM,SAAUC,WAAWA,CAAIC,MAA0B,EAAEC,MAA6C;EAA7C,IAAAA,MAAA;IAAAA,MAAA,GAAAL,cAA6C;EAAA;EAEtG,IAAIM,UAAU,GAAwB,IAAI;EAClC,IAAAL,SAAS,GAA+BI,MAAM,CAAAJ,SAArC;IAAEM,EAAA,GAA6BF,MAAM,CAAAH,iBAAX;IAAxBA,iBAAiB,GAAAK,EAAA,cAAG,IAAI,GAAAA,EAAA;EAC3C,IAAIC,OAAO,GAAGP,SAAS,EAAE;EAEzB,IAAMQ,MAAM,GAAQ,IAAIX,UAAU,CAAI,UAACY,UAAU;IAC/C,OAAOF,OAAO,CAACG,SAAS,CAACD,UAAU,CAAC;EACtC,CAAC,CAAC;EAKFD,MAAM,CAACG,OAAO,GAAG;IACf,IAAI,CAACN,UAAU,IAAIA,UAAU,CAACO,MAAM,EAAE;MACpCP,UAAU,GAAGP,KAAK,CAAC;QAAM,OAAAK,MAAM;MAAN,CAAM,CAAC,CAACO,SAAS,CAACH,OAAO,CAAC;MACnD,IAAIN,iBAAiB,EAAE;QACrBI,UAAU,CAACQ,GAAG,CAAC;UAAM,OAACN,OAAO,GAAGP,SAAS,EAAE;QAAtB,CAAuB,CAAC;;;IAGjD,OAAOK,UAAU;EACnB,CAAC;EAED,OAAOG,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}