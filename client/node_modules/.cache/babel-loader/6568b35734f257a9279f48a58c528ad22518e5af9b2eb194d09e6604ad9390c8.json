{"ast":null,"code":"// src/StateObservable.ts\nimport { Observable, Subject } from \"rxjs\";\nvar StateObservable = class extends Observable {\n  value;\n  __notifier = new Subject();\n  constructor(input$, initialState) {\n    super(subscriber => {\n      const subscription = this.__notifier.subscribe(subscriber);\n      if (subscription && !subscription.closed) {\n        subscriber.next(this.value);\n      }\n      return subscription;\n    });\n    this.value = initialState;\n    input$.subscribe(value => {\n      if (value !== this.value) {\n        this.value = value;\n        this.__notifier.next(value);\n      }\n    });\n  }\n};\n\n// src/combineEpics.ts\nimport { merge } from \"rxjs\";\nfunction combineEpics(...epics) {\n  const merger = (...args) => merge(...epics.map(epic => {\n    const output$ = epic(...args);\n    if (!output$) {\n      throw new TypeError(`combineEpics: one of the provided Epics \"${epic.name || \"<anonymous>\"}\" does not return a stream. Double check you're not missing a return statement!`);\n    }\n    return output$;\n  }));\n  try {\n    Object.defineProperty(merger, \"name\", {\n      value: `combineEpics(${epics.map(epic => epic.name || \"<anonymous>\").join(\", \")})`\n    });\n  } catch (e) {}\n  return merger;\n}\n\n// src/createEpicMiddleware.ts\nimport { Subject as Subject2, from, queueScheduler } from \"rxjs\";\nimport { map, mergeMap, observeOn, subscribeOn } from \"rxjs/operators\";\n\n// src/utils/console.ts\nvar deprecationsSeen = {};\nvar resetDeprecationsSeen = () => {\n  deprecationsSeen = {};\n};\nvar consoleWarn = typeof console === \"object\" && typeof console.warn === \"function\" ? console.warn.bind(console) : () => {};\nvar warn = msg => {\n  consoleWarn(`redux-observable | WARNING: ${msg}`);\n};\n\n// src/createEpicMiddleware.ts\nfunction createEpicMiddleware(options = {}) {\n  const QueueScheduler = queueScheduler.constructor;\n  const uniqueQueueScheduler = new QueueScheduler(\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  queueScheduler.schedulerActionCtor);\n  if (process.env.NODE_ENV !== \"production\" && typeof options === \"function\") {\n    throw new TypeError(\"Providing your root Epic to `createEpicMiddleware(rootEpic)` is no longer supported, instead use `epicMiddleware.run(rootEpic)`\\n\\nLearn more: https://redux-observable.js.org/MIGRATION.html#setting-up-the-middleware\");\n  }\n  const epic$ = new Subject2();\n  let store;\n  const epicMiddleware = _store => {\n    if (process.env.NODE_ENV !== \"production\" && store) {\n      warn(\"this middleware is already associated with a store. createEpicMiddleware should be called for every store.\\n\\nLearn more: https://goo.gl/2GQ7Da\");\n    }\n    store = _store;\n    const actionSubject$ = new Subject2();\n    const stateSubject$ = new Subject2();\n    const action$ = actionSubject$.asObservable().pipe(observeOn(uniqueQueueScheduler));\n    const state$ = new StateObservable(stateSubject$.pipe(observeOn(uniqueQueueScheduler)), store.getState());\n    const result$ = epic$.pipe(map(epic => {\n      const output$ = epic(action$, state$, options.dependencies);\n      if (!output$) {\n        throw new TypeError(`Your root Epic \"${epic.name || \"<anonymous>\"}\" does not return a stream. Double check you're not missing a return statement!`);\n      }\n      return output$;\n    }), mergeMap(output$ => from(output$).pipe(subscribeOn(uniqueQueueScheduler), observeOn(uniqueQueueScheduler))));\n    result$.subscribe(store.dispatch);\n    return next => {\n      return action => {\n        const result = next(action);\n        stateSubject$.next(store.getState());\n        actionSubject$.next(action);\n        return result;\n      };\n    };\n  };\n  epicMiddleware.run = rootEpic => {\n    if (process.env.NODE_ENV !== \"production\" && !store) {\n      warn(\"epicMiddleware.run(rootEpic) called before the middleware has been setup by redux. Provide the epicMiddleware instance to createStore() first.\");\n    }\n    epic$.next(rootEpic);\n  };\n  return epicMiddleware;\n}\n\n// src/operators.ts\nimport { isAction } from \"redux\";\nimport { filter } from \"rxjs/operators\";\nfunction ofType(...types) {\n  const len = types.length;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (len === 0) {\n      warn(\"ofType was called without any types!\");\n    }\n    if (types.some(key => key === null || key === void 0)) {\n      warn(\"ofType was called with one or more undefined or null values!\");\n    }\n  }\n  return filter(len === 1 ? action => isAction(action) && action.type === types[0] : action => {\n    if (isAction(action)) {\n      for (let i = 0; i < len; i++) {\n        if (action.type === types[i]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  });\n}\nexport { StateObservable, resetDeprecationsSeen as __FOR_TESTING__resetDeprecationsSeen, combineEpics, createEpicMiddleware, ofType };","map":{"version":3,"names":["Observable","Subject","StateObservable","value","__notifier","constructor","input$","initialState","subscriber","subscription","subscribe","closed","next","merge","combineEpics","epics","merger","args","map","epic","output$","TypeError","name","Object","defineProperty","join","e","Subject2","from","queueScheduler","mergeMap","observeOn","subscribeOn","deprecationsSeen","resetDeprecationsSeen","consoleWarn","console","warn","bind","msg","createEpicMiddleware","options","QueueScheduler","uniqueQueueScheduler","schedulerActionCtor","process","env","NODE_ENV","epic$","store","epicMiddleware","_store","actionSubject$","stateSubject$","action$","asObservable","pipe","state$","getState","result$","dependencies","dispatch","action","result","run","rootEpic","isAction","filter","ofType","types","len","length","some","key","type","i"],"sources":["C:\\Users\\benam\\OneDrive\\Bureau\\My-Mern-Project\\client\\node_modules\\redux-observable\\src\\StateObservable.ts","C:\\Users\\benam\\OneDrive\\Bureau\\My-Mern-Project\\client\\node_modules\\redux-observable\\src\\combineEpics.ts","C:\\Users\\benam\\OneDrive\\Bureau\\My-Mern-Project\\client\\node_modules\\redux-observable\\src\\createEpicMiddleware.ts","C:\\Users\\benam\\OneDrive\\Bureau\\My-Mern-Project\\client\\node_modules\\redux-observable\\src\\utils\\console.ts","C:\\Users\\benam\\OneDrive\\Bureau\\My-Mern-Project\\client\\node_modules\\redux-observable\\src\\operators.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\n\nexport class StateObservable<S> extends Observable<S> {\n  value: S;\n  private __notifier = new Subject<S>();\n\n  constructor(input$: Observable<S>, initialState: S) {\n    super((subscriber) => {\n      const subscription = this.__notifier.subscribe(subscriber);\n      if (subscription && !subscription.closed) {\n        subscriber.next(this.value);\n      }\n      return subscription;\n    });\n\n    this.value = initialState;\n    input$.subscribe((value) => {\n      // We only want to update state$ if it has actually changed since\n      // redux requires reducers use immutability patterns.\n      // This is basically what distinctUntilChanged() does but it's so simple\n      // we don't need to pull that code in\n      if (value !== this.value) {\n        this.value = value;\n        this.__notifier.next(value);\n      }\n    });\n  }\n}\n","import { merge } from 'rxjs';\nimport type { Epic } from './epic';\n\n/**\n  Merges all epics into a single one.\n */\nexport function combineEpics<\n  Input = unknown,\n  Output extends Input = Input,\n  State = void,\n  Dependencies = any\n>(\n  ...epics: Epic<Input, Output, State, Dependencies>[]\n): Epic<Input, Output, State, Dependencies> {\n  const merger: Epic<Input, Output, State, Dependencies> = (...args) =>\n    merge(\n      ...epics.map((epic) => {\n        const output$ = epic(...args);\n        if (!output$) {\n          throw new TypeError(\n            `combineEpics: one of the provided Epics \"${\n              epic.name || '<anonymous>'\n            }\" does not return a stream. Double check you're not missing a return statement!`\n          );\n        }\n        return output$;\n      })\n    );\n\n  // Technically the `name` property on Function's are supposed to be read-only.\n  // While some JS runtimes allow it anyway (so this is useful in debugging)\n  // some actually throw an exception when you attempt to do so.\n  try {\n    Object.defineProperty(merger, 'name', {\n      value: `combineEpics(${epics\n        .map((epic) => epic.name || '<anonymous>')\n        .join(', ')})`,\n    });\n  } catch (e) {\n    // noop\n  }\n\n  return merger;\n}\n","import type { Dispatch, Middleware, MiddlewareAPI } from 'redux';\nimport { Subject, from, queueScheduler } from 'rxjs';\nimport { map, mergeMap, observeOn, subscribeOn } from 'rxjs/operators';\nimport { StateObservable } from './StateObservable';\nimport type { Epic } from './epic';\nimport { warn } from './utils/console';\n\ninterface Options<D = any> {\n  dependencies?: D;\n}\n\nexport interface EpicMiddleware<\n  Input = unknown,\n  Output extends Input = Input,\n  State = void,\n  Dependencies = any\n  // eslint-disable-next-line @typescript-eslint/ban-types\n> extends Middleware<{}, State> {\n  run(rootEpic: Epic<Input, Output, State, Dependencies>): void;\n}\n\nexport function createEpicMiddleware<\n  Input = unknown,\n  Output extends Input = Input,\n  State = void,\n  Dependencies = any\n>(\n  options: Options<Dependencies> = {}\n): EpicMiddleware<Input, Output, State, Dependencies> {\n  // This isn't great. RxJS doesn't publicly export the constructor for\n  // QueueScheduler nor QueueAction, so we reach in. We need to do this because\n  // we don't want our internal queuing mechanism to be on the same queue as any\n  // other RxJS code outside of redux-observable internals.\n  const QueueScheduler: any = queueScheduler.constructor;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n  const uniqueQueueScheduler: typeof queueScheduler = new QueueScheduler(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (queueScheduler as any).schedulerActionCtor\n  );\n\n  if (process.env.NODE_ENV !== 'production' && typeof options === 'function') {\n    throw new TypeError(\n      'Providing your root Epic to `createEpicMiddleware(rootEpic)` is no longer supported, instead use `epicMiddleware.run(rootEpic)`\\n\\nLearn more: https://redux-observable.js.org/MIGRATION.html#setting-up-the-middleware'\n    );\n  }\n\n  const epic$ = new Subject<Epic<Input, Output, State, Dependencies>>();\n  let store: MiddlewareAPI<Dispatch<any>, State>;\n\n  const epicMiddleware: EpicMiddleware<Input, Output, State, Dependencies> = (\n    _store\n  ) => {\n    if (process.env.NODE_ENV !== 'production' && store) {\n      // https://github.com/redux-observable/redux-observable/issues/389\n      warn(\n        'this middleware is already associated with a store. createEpicMiddleware should be called for every store.\\n\\nLearn more: https://goo.gl/2GQ7Da'\n      );\n    }\n    store = _store;\n    const actionSubject$ = new Subject<Input>();\n    const stateSubject$ = new Subject<State>();\n    const action$ = actionSubject$\n      .asObservable()\n      .pipe(observeOn(uniqueQueueScheduler));\n    const state$ = new StateObservable(\n      stateSubject$.pipe(observeOn(uniqueQueueScheduler)),\n      store.getState()\n    );\n\n    const result$ = epic$.pipe(\n      map((epic) => {\n        const output$ = epic(action$, state$, options.dependencies!);\n\n        if (!output$) {\n          throw new TypeError(\n            `Your root Epic \"${\n              epic.name || '<anonymous>'\n            }\" does not return a stream. Double check you're not missing a return statement!`\n          );\n        }\n\n        return output$;\n      }),\n      mergeMap((output$) =>\n        from(output$).pipe(\n          subscribeOn(uniqueQueueScheduler),\n          observeOn(uniqueQueueScheduler)\n        )\n      )\n    );\n\n    result$.subscribe(store.dispatch);\n\n    return (next) => {\n      return (action) => {\n        // Downstream middleware gets the action first,\n        // which includes their reducers, so state is\n        // updated before epics receive the action\n        const result = next(action);\n\n        // It's important to update the state$ before we emit\n        // the action because otherwise it would be stale\n        stateSubject$.next(store.getState());\n        actionSubject$.next(action as Input);\n\n        return result;\n      };\n    };\n  };\n\n  epicMiddleware.run = (rootEpic) => {\n    if (process.env.NODE_ENV !== 'production' && !store) {\n      warn(\n        'epicMiddleware.run(rootEpic) called before the middleware has been setup by redux. Provide the epicMiddleware instance to createStore() first.'\n      );\n    }\n    epic$.next(rootEpic);\n  };\n\n  return epicMiddleware;\n}\n","let deprecationsSeen: { [key: string]: boolean } = {};\nexport const resetDeprecationsSeen = (): void => {\n  deprecationsSeen = {};\n};\n\nconst consoleWarn =\n  typeof console === 'object' && typeof console.warn === 'function'\n    ? console.warn.bind(console)\n    : () => {};\n\nexport const deprecate = (msg: string): void => {\n  if (!deprecationsSeen[msg]) {\n    deprecationsSeen[msg] = true;\n    consoleWarn(`redux-observable | DEPRECATION: ${msg}`);\n  }\n};\n\nexport const warn = (msg: string): void => {\n  consoleWarn(`redux-observable | WARNING: ${msg}`);\n};\n","import { isAction, type Action } from 'redux';\nimport type { OperatorFunction } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { warn } from './utils/console';\n\n/**\n * Inferring the types of this is a bit challenging, and only works in newer\n * versions of TypeScript.\n *\n * @param ...types One or more Redux action types you want to filter for, variadic.\n */\nexport function ofType<\n  // All possible actions your app can dispatch\n  Input,\n  // The types you want to filter for\n  Type extends string,\n  // The resulting actions that match the above types\n  Output extends Input = Extract<Input, Action<Type>>\n>(...types: [Type, ...Type[]]): OperatorFunction<Input, Output> {\n  const len = types.length;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (len === 0) {\n      warn('ofType was called without any types!');\n    }\n    if (types.some((key) => key === null || key === undefined)) {\n      warn('ofType was called with one or more undefined or null values!');\n    }\n  }\n\n  return filter(\n    len === 1\n      ? (action): action is Output => isAction(action) && action.type === types[0]\n      : (action): action is Output => {\n        if (isAction(action)) {\n          for (let i = 0; i < len; i++) {\n            if (action.type === types[i]) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}