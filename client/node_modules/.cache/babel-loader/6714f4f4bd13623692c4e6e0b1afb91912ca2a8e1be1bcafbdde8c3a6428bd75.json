{"ast":null,"code":"import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n  var tapObserver = isFunction(observerOrNext) || error || complete ? {\n    next: observerOrNext,\n    error: error,\n    complete: complete\n  } : observerOrNext;\n  return tapObserver ? operate(function (source, subscriber) {\n    var _a;\n    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n    var isUnsub = true;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var _a;\n      (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n      subscriber.next(value);\n    }, function () {\n      var _a;\n      isUnsub = false;\n      (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n      subscriber.complete();\n    }, function (err) {\n      var _a;\n      isUnsub = false;\n      (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n      subscriber.error(err);\n    }, function () {\n      var _a, _b;\n      if (isUnsub) {\n        (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n      }\n      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n    }));\n  }) : identity;\n}","map":{"version":3,"names":["isFunction","operate","createOperatorSubscriber","identity","tap","observerOrNext","error","complete","tapObserver","next","source","subscriber","_a","subscribe","call","isUnsub","value","err","unsubscribe","_b","finalize"],"sources":["C:\\Users\\samka\\OneDrive\\Bureau\\My-Mern-Backend\\client\\node_modules\\rxjs\\src\\internal\\operators\\tap.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, Observer } from '../types';\r\nimport { isFunction } from '../util/isFunction';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { identity } from '../util/identity';\r\n\r\n/**\r\n * An extension to the {@link Observer} interface used only by the {@link tap} operator.\r\n *\r\n * It provides a useful set of callbacks a user can register to do side-effects in\r\n * cases other than what the usual {@link Observer} callbacks are\r\n * ({@link guide/glossary-and-semantics#next next},\r\n * {@link guide/glossary-and-semantics#error error} and/or\r\n * {@link guide/glossary-and-semantics#complete complete}).\r\n *\r\n * ## Example\r\n *\r\n * ```ts\r\n * import { fromEvent, switchMap, tap, interval, take } from 'rxjs';\r\n *\r\n * const source$ = fromEvent(document, 'click');\r\n * const result$ = source$.pipe(\r\n *   switchMap((_, i) => i % 2 === 0\r\n *     ? fromEvent(document, 'mousemove').pipe(\r\n *         tap({\r\n *           subscribe: () => console.log('Subscribed to the mouse move events after click #' + i),\r\n *           unsubscribe: () => console.log('Mouse move events #' + i + ' unsubscribed'),\r\n *           finalize: () => console.log('Mouse move events #' + i + ' finalized')\r\n *         })\r\n *       )\r\n *     : interval(1_000).pipe(\r\n *         take(5),\r\n *         tap({\r\n *           subscribe: () => console.log('Subscribed to the 1-second interval events after click #' + i),\r\n *           unsubscribe: () => console.log('1-second interval events #' + i + ' unsubscribed'),\r\n *           finalize: () => console.log('1-second interval events #' + i + ' finalized')\r\n *         })\r\n *       )\r\n *   )\r\n * );\r\n *\r\n * const subscription = result$.subscribe({\r\n *   next: console.log\r\n * });\r\n *\r\n * setTimeout(() => {\r\n *   console.log('Unsubscribe after 60 seconds');\r\n *   subscription.unsubscribe();\r\n * }, 60_000);\r\n * ```\r\n */\r\nexport interface TapObserver<T> extends Observer<T> {\r\n  /**\r\n   * The callback that `tap` operator invokes at the moment when the source Observable\r\n   * gets subscribed to.\r\n   */\r\n  subscribe: () => void;\r\n  /**\r\n   * The callback that `tap` operator invokes when an explicit\r\n   * {@link guide/glossary-and-semantics#unsubscription unsubscribe} happens. It won't get invoked on\r\n   * `error` or `complete` events.\r\n   */\r\n  unsubscribe: () => void;\r\n  /**\r\n   * The callback that `tap` operator invokes when any kind of\r\n   * {@link guide/glossary-and-semantics#finalization finalization} happens - either when\r\n   * the source Observable `error`s or `complete`s or when it gets explicitly unsubscribed\r\n   * by the user. There is no difference in using this callback or the {@link finalize}\r\n   * operator, but if you're already using `tap` operator, you can use this callback\r\n   * instead. You'd get the same result in either case.\r\n   */\r\n  finalize: () => void;\r\n}\r\nexport function tap<T>(observerOrNext?: Partial<TapObserver<T>> | ((value: T) => void)): MonoTypeOperatorFunction<T>;\r\n/** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\r\nexport function tap<T>(\r\n  next?: ((value: T) => void) | null,\r\n  error?: ((error: any) => void) | null,\r\n  complete?: (() => void) | null\r\n): MonoTypeOperatorFunction<T>;\r\n\r\n/**\r\n * Used to perform side-effects for notifications from the source observable\r\n *\r\n * <span class=\"informal\">Used when you want to affect outside state with a notification without altering the notification</span>\r\n *\r\n * ![](tap.png)\r\n *\r\n * Tap is designed to allow the developer a designated place to perform side effects. While you _could_ perform side-effects\r\n * inside of a `map` or a `mergeMap`, that would make their mapping functions impure, which isn't always a big deal, but will\r\n * make it so you can't do things like memoize those functions. The `tap` operator is designed solely for such side-effects to\r\n * help you remove side-effects from other operations.\r\n *\r\n * For any notification, next, error, or complete, `tap` will call the appropriate callback you have provided to it, via a function\r\n * reference, or a partial observer, then pass that notification down the stream.\r\n *\r\n * The observable returned by `tap` is an exact mirror of the source, with one exception: Any error that occurs -- synchronously -- in a handler\r\n * provided to `tap` will be emitted as an error from the returned observable.\r\n *\r\n * > Be careful! You can mutate objects as they pass through the `tap` operator's handlers.\r\n *\r\n * The most common use of `tap` is actually for debugging. You can place a `tap(console.log)` anywhere\r\n * in your observable `pipe`, log out the notifications as they are emitted by the source returned by the previous\r\n * operation.\r\n *\r\n * ## Examples\r\n *\r\n * Check a random number before it is handled. Below is an observable that will use a random number between 0 and 1,\r\n * and emit `'big'` or `'small'` depending on the size of that number. But we wanted to log what the original number\r\n * was, so we have added a `tap(console.log)`.\r\n *\r\n * ```ts\r\n * import { of, tap, map } from 'rxjs';\r\n *\r\n * of(Math.random()).pipe(\r\n *   tap(console.log),\r\n *   map(n => n > 0.5 ? 'big' : 'small')\r\n * ).subscribe(console.log);\r\n * ```\r\n *\r\n * Using `tap` to analyze a value and force an error. Below is an observable where in our system we only\r\n * want to emit numbers 3 or less we get from another source. We can force our observable to error\r\n * using `tap`.\r\n *\r\n * ```ts\r\n * import { of, tap } from 'rxjs';\r\n *\r\n * const source = of(1, 2, 3, 4, 5);\r\n *\r\n * source.pipe(\r\n *   tap(n => {\r\n *     if (n > 3) {\r\n *       throw new TypeError(`Value ${ n } is greater than 3`);\r\n *     }\r\n *   })\r\n * )\r\n * .subscribe({ next: console.log, error: err => console.log(err.message) });\r\n * ```\r\n *\r\n * We want to know when an observable completes before moving on to the next observable. The system\r\n * below will emit a random series of `'X'` characters from 3 different observables in sequence. The\r\n * only way we know when one observable completes and moves to the next one, in this case, is because\r\n * we have added a `tap` with the side effect of logging to console.\r\n *\r\n * ```ts\r\n * import { of, concatMap, interval, take, map, tap } from 'rxjs';\r\n *\r\n * of(1, 2, 3).pipe(\r\n *   concatMap(n => interval(1000).pipe(\r\n *     take(Math.round(Math.random() * 10)),\r\n *     map(() => 'X'),\r\n *     tap({ complete: () => console.log(`Done with ${ n }`) })\r\n *   ))\r\n * )\r\n * .subscribe(console.log);\r\n * ```\r\n *\r\n * @see {@link finalize}\r\n * @see {@link TapObserver}\r\n *\r\n * @param observerOrNext A next handler or partial observer\r\n * @param error An error handler\r\n * @param complete A completion handler\r\n * @return A function that returns an Observable identical to the source, but\r\n * runs the specified Observer or callback(s) for each item.\r\n */\r\nexport function tap<T>(\r\n  observerOrNext?: Partial<TapObserver<T>> | ((value: T) => void) | null,\r\n  error?: ((e: any) => void) | null,\r\n  complete?: (() => void) | null\r\n): MonoTypeOperatorFunction<T> {\r\n  // We have to check to see not only if next is a function,\r\n  // but if error or complete were passed. This is because someone\r\n  // could technically call tap like `tap(null, fn)` or `tap(null, null, fn)`.\r\n  const tapObserver =\r\n    isFunction(observerOrNext) || error || complete\r\n      ? // tslint:disable-next-line: no-object-literal-type-assertion\r\n        ({ next: observerOrNext as Exclude<typeof observerOrNext, Partial<TapObserver<T>>>, error, complete } as Partial<TapObserver<T>>)\r\n      : observerOrNext;\r\n\r\n  return tapObserver\r\n    ? operate((source, subscriber) => {\r\n        tapObserver.subscribe?.();\r\n        let isUnsub = true;\r\n        source.subscribe(\r\n          createOperatorSubscriber(\r\n            subscriber,\r\n            (value) => {\r\n              tapObserver.next?.(value);\r\n              subscriber.next(value);\r\n            },\r\n            () => {\r\n              isUnsub = false;\r\n              tapObserver.complete?.();\r\n              subscriber.complete();\r\n            },\r\n            (err) => {\r\n              isUnsub = false;\r\n              tapObserver.error?.(err);\r\n              subscriber.error(err);\r\n            },\r\n            () => {\r\n              if (isUnsub) {\r\n                tapObserver.unsubscribe?.();\r\n              }\r\n              tapObserver.finalize?.();\r\n            }\r\n          )\r\n        );\r\n      })\r\n    : // Tap was called with no valid tap observer or handler\r\n      // (e.g. `tap(null, null, null)` or `tap(null)` or `tap()`)\r\n      // so we're going to just mirror the source.\r\n      identity;\r\n}\r\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,QAAQ,QAAQ,kBAAkB;AAkK3C,OAAM,SAAUC,GAAGA,CACjBC,cAAsE,EACtEC,KAAiC,EACjCC,QAA8B;EAK9B,IAAMC,WAAW,GACfR,UAAU,CAACK,cAAc,CAAC,IAAIC,KAAK,IAAIC,QAAQ,GAE1C;IAAEE,IAAI,EAAEJ,cAAyE;IAAEC,KAAK,EAAAA,KAAA;IAAEC,QAAQ,EAAAA;EAAA,CAA8B,GACjIF,cAAc;EAEpB,OAAOG,WAAW,GACdP,OAAO,CAAC,UAACS,MAAM,EAAEC,UAAU;;IACzB,CAAAC,EAAA,GAAAJ,WAAW,CAACK,SAAS,cAAAD,EAAA,uBAAAA,EAAA,CAAAE,IAAA,CAArBN,WAAW,CAAc;IACzB,IAAIO,OAAO,GAAG,IAAI;IAClBL,MAAM,CAACG,SAAS,CACdX,wBAAwB,CACtBS,UAAU,EACV,UAACK,KAAK;;MACJ,CAAAJ,EAAA,GAAAJ,WAAW,CAACC,IAAI,cAAAG,EAAA,uBAAAA,EAAA,CAAAE,IAAA,CAAhBN,WAAW,EAAQQ,KAAK,CAAC;MACzBL,UAAU,CAACF,IAAI,CAACO,KAAK,CAAC;IACxB,CAAC,EACD;;MACED,OAAO,GAAG,KAAK;MACf,CAAAH,EAAA,GAAAJ,WAAW,CAACD,QAAQ,cAAAK,EAAA,uBAAAA,EAAA,CAAAE,IAAA,CAApBN,WAAW,CAAa;MACxBG,UAAU,CAACJ,QAAQ,EAAE;IACvB,CAAC,EACD,UAACU,GAAG;;MACFF,OAAO,GAAG,KAAK;MACf,CAAAH,EAAA,GAAAJ,WAAW,CAACF,KAAK,cAAAM,EAAA,uBAAAA,EAAA,CAAAE,IAAA,CAAjBN,WAAW,EAASS,GAAG,CAAC;MACxBN,UAAU,CAACL,KAAK,CAACW,GAAG,CAAC;IACvB,CAAC,EACD;;MACE,IAAIF,OAAO,EAAE;QACX,CAAAH,EAAA,GAAAJ,WAAW,CAACU,WAAW,cAAAN,EAAA,uBAAAA,EAAA,CAAAE,IAAA,CAAvBN,WAAW,CAAgB;;MAE7B,CAAAW,EAAA,GAAAX,WAAW,CAACY,QAAQ,cAAAD,EAAA,uBAAAA,EAAA,CAAAL,IAAA,CAApBN,WAAW,CAAa;IAC1B,CAAC,CACF,CACF;EACH,CAAC,CAAC,GAIFL,QAAQ;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}