{"ast":null,"code":"import { not } from '../util/not';\nimport { filter } from './filter';\nexport function partition(predicate, thisArg) {\n  return function (source) {\n    return [filter(predicate, thisArg)(source), filter(not(predicate, thisArg))(source)];\n  };\n}","map":{"version":3,"names":["not","filter","partition","predicate","thisArg","source"],"sources":["C:\\Users\\samka\\OneDrive\\Bureau\\My-Mern-Backend\\client\\node_modules\\rxjs\\src\\internal\\operators\\partition.ts"],"sourcesContent":["import { not } from '../util/not';\r\nimport { filter } from './filter';\r\nimport { Observable } from '../Observable';\r\nimport { UnaryFunction } from '../types';\r\n\r\n/**\r\n * Splits the source Observable into two, one with values that satisfy a\r\n * predicate, and another with values that don't satisfy the predicate.\r\n *\r\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\r\n * one like the output of {@link filter}, and the other with values that did not\r\n * pass the condition.</span>\r\n *\r\n * ![](partition.png)\r\n *\r\n * `partition` outputs an array with two Observables that partition the values\r\n * from the source Observable through the given `predicate` function. The first\r\n * Observable in that array emits source values for which the predicate argument\r\n * returns true. The second Observable emits source values for which the\r\n * predicate returns false. The first behaves like {@link filter} and the second\r\n * behaves like {@link filter} with the predicate negated.\r\n *\r\n * ## Example\r\n *\r\n * Partition click events into those on DIV elements and those elsewhere\r\n *\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { partition } from 'rxjs/operators';\r\n *\r\n * const div = document.createElement('div');\r\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\r\n * document.body.appendChild(div);\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const [clicksOnDivs, clicksElsewhere] = clicks.pipe(partition(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\r\n *\r\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\r\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\r\n * ```\r\n *\r\n * @see {@link filter}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted on the first Observable in the returned array, if\r\n * `false` the value is emitted on the second Observable in the array. The\r\n * `index` parameter is the number `i` for the i-th source emission that has\r\n * happened since the subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return A function that returns an array with two Observables: one with\r\n * values that passed the predicate, and another with values that did not pass\r\n * the predicate.\r\n * @deprecated Replaced with the `partition` static creation function. Will be removed in v8.\r\n */\r\nexport function partition<T>(\r\n  predicate: (value: T, index: number) => boolean,\r\n  thisArg?: any\r\n): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\r\n  return (source: Observable<T>) =>\r\n    [filter(predicate, thisArg)(source), filter(not(predicate, thisArg))(source)] as [Observable<T>, Observable<T>];\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,aAAa;AACjC,SAASC,MAAM,QAAQ,UAAU;AAuDjC,OAAM,SAAUC,SAASA,CACvBC,SAA+C,EAC/CC,OAAa;EAEb,OAAO,UAACC,MAAqB;IAC3B,QAACJ,MAAM,CAACE,SAAS,EAAEC,OAAO,CAAC,CAACC,MAAM,CAAC,EAAEJ,MAAM,CAACD,GAAG,CAACG,SAAS,EAAEC,OAAO,CAAC,CAAC,CAACC,MAAM,CAAC,CAAmC;EAA/G,CAA+G;AACnH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}