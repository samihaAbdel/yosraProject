{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { onErrorResumeNext as oERNCreate } from '../observable/onErrorResumeNext';\nexport function onErrorResumeNextWith() {\n  var sources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n  var nextSources = argsOrArgArray(sources);\n  return function (source) {\n    return oERNCreate.apply(void 0, __spreadArray([source], __read(nextSources)));\n  };\n}\nexport var onErrorResumeNext = onErrorResumeNextWith;","map":{"version":3,"names":["argsOrArgArray","onErrorResumeNext","oERNCreate","onErrorResumeNextWith","sources","_i","arguments","length","nextSources","source","apply","__spreadArray","__read"],"sources":["C:\\Users\\samka\\OneDrive\\Bureau\\My-Mern-Backend\\client\\node_modules\\rxjs\\src\\internal\\operators\\onErrorResumeNextWith.ts"],"sourcesContent":["import { ObservableInputTuple, OperatorFunction } from '../types';\r\nimport { argsOrArgArray } from '../util/argsOrArgArray';\r\nimport { onErrorResumeNext as oERNCreate } from '../observable/onErrorResumeNext';\r\n\r\nexport function onErrorResumeNextWith<T, A extends readonly unknown[]>(\r\n  sources: [...ObservableInputTuple<A>]\r\n): OperatorFunction<T, T | A[number]>;\r\nexport function onErrorResumeNextWith<T, A extends readonly unknown[]>(\r\n  ...sources: [...ObservableInputTuple<A>]\r\n): OperatorFunction<T, T | A[number]>;\r\n\r\n/**\r\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\r\n * that was passed.\r\n *\r\n * <span class=\"informal\">Execute series of Observables, subscribes to next one on error or complete.</span>\r\n *\r\n * ![](onErrorResumeNext.png)\r\n *\r\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\r\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\r\n * as the source.\r\n *\r\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\r\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\r\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\r\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\r\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\r\n * be happening until there is no more Observables left in the series, at which point returned Observable will\r\n * complete - even if the last subscribed stream ended with an error.\r\n *\r\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\r\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\r\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\r\n * an error.\r\n *\r\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\r\n * expect these errors to appear in error callback passed to {@link Observable#subscribe}. If you want to take\r\n * specific actions based on what error was emitted by an Observable, you should try out {@link catchError} instead.\r\n *\r\n *\r\n * ## Example\r\n *\r\n * Subscribe to the next Observable after map fails\r\n *\r\n * ```ts\r\n * import { of, onErrorResumeNext, map } from 'rxjs';\r\n *\r\n * of(1, 2, 3, 0)\r\n *   .pipe(\r\n *     map(x => {\r\n *       if (x === 0) {\r\n *         throw Error();\r\n *       }\r\n *\r\n *       return 10 / x;\r\n *     }),\r\n *     onErrorResumeNext(of(1, 2, 3))\r\n *   )\r\n *   .subscribe({\r\n *     next: val => console.log(val),\r\n *     error: err => console.log(err),          // Will never be called.\r\n *     complete: () => console.log('that\\'s it!')\r\n *   });\r\n *\r\n * // Logs:\r\n * // 10\r\n * // 5\r\n * // 3.3333333333333335\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // 'that's it!'\r\n * ```\r\n *\r\n * @see {@link concat}\r\n * @see {@link catchError}\r\n *\r\n * @param {...ObservableInput} sources Observables passed either directly or as an array.\r\n * @return A function that returns an Observable that emits values from source\r\n * Observable, but - if it errors - subscribes to the next passed Observable\r\n * and so on, until it completes or runs out of Observables.\r\n */\r\nexport function onErrorResumeNextWith<T, A extends readonly unknown[]>(\r\n  ...sources: [[...ObservableInputTuple<A>]] | [...ObservableInputTuple<A>]\r\n): OperatorFunction<T, T | A[number]> {\r\n  // For some reason, TS 4.1 RC gets the inference wrong here and infers the\r\n  // result to be `A[number][]` - completely dropping the ObservableInput part\r\n  // of the type. This makes no sense whatsoever. As a workaround, the type is\r\n  // asserted explicitly.\r\n  const nextSources = argsOrArgArray(sources) as unknown as ObservableInputTuple<A>;\r\n\r\n  return (source) => oERNCreate(source, ...nextSources);\r\n}\r\n\r\n/**\r\n * @deprecated Renamed. Use {@link onErrorResumeNextWith} instead. Will be removed in v8.\r\n */\r\nexport const onErrorResumeNext = onErrorResumeNextWith;\r\n"],"mappings":";AACA,SAASA,cAAc,QAAQ,wBAAwB;AACvD,SAASC,iBAAiB,IAAIC,UAAU,QAAQ,iCAAiC;AAiFjF,OAAM,SAAUC,qBAAqBA,CAAA;EACnC,IAAAC,OAAA;OAAA,IAAAC,EAAA,IAAyE,EAAzEA,EAAA,GAAAC,SAAA,CAAAC,MAAyE,EAAzEF,EAAA,EAAyE;IAAzED,OAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EAMA,IAAMG,WAAW,GAAGR,cAAc,CAACI,OAAO,CAAuC;EAEjF,OAAO,UAACK,MAAM;IAAK,OAAAP,UAAU,CAAAQ,KAAA,SAAAC,aAAA,EAACF,MAAM,GAAAG,MAAA,CAAKJ,WAAW;EAAjC,CAAkC;AACvD;AAKA,OAAO,IAAMP,iBAAiB,GAAGE,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}