{"ast":null,"code":"import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n  if (isFunction(resultSelector)) {\n    return mergeMap(function (a, i) {\n      return map(function (b, ii) {\n        return resultSelector(a, b, i, ii);\n      })(innerFrom(project(a, i)));\n    }, concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return operate(function (source, subscriber) {\n    return mergeInternals(source, subscriber, project, concurrent);\n  });\n}","map":{"version":3,"names":["map","innerFrom","operate","mergeInternals","isFunction","mergeMap","project","resultSelector","concurrent","Infinity","a","i","b","ii","source","subscriber"],"sources":["C:\\Users\\samka\\OneDrive\\Bureau\\My-Mern-Backend\\client\\node_modules\\rxjs\\src\\internal\\operators\\mergeMap.ts"],"sourcesContent":["import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\r\nimport { map } from './map';\r\nimport { innerFrom } from '../observable/innerFrom';\r\nimport { operate } from '../util/lift';\r\nimport { mergeInternals } from './mergeInternals';\r\nimport { isFunction } from '../util/isFunction';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function mergeMap<T, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  concurrent?: number\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\r\nexport function mergeMap<T, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector: undefined,\r\n  concurrent?: number\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\r\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\r\n  concurrent?: number\r\n): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link mergeAll}.</span>\r\n *\r\n * ![](mergeMap.png)\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger.\r\n *\r\n * ## Example\r\n *\r\n * Map and flatten each letter to an Observable ticking every 1 second\r\n *\r\n * ```ts\r\n * import { of, mergeMap, interval, map } from 'rxjs';\r\n *\r\n * const letters = of('a', 'b', 'c');\r\n * const result = letters.pipe(\r\n *   mergeMap(x => interval(1000).pipe(map(i => x + i)))\r\n * );\r\n *\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // a0\r\n * // b0\r\n * // c0\r\n * // a1\r\n * // b1\r\n * // c1\r\n * // continues to list a, b, c every second with respective ascending integers\r\n * ```\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link merge}\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {number} [concurrent=Infinity] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @return A function that returns an Observable that emits the result of\r\n * applying the projection function (and the optional deprecated\r\n * `resultSelector`) to each item emitted by the source Observable and merging\r\n * the results of the Observables obtained from this transformation.\r\n */\r\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\r\n  concurrent: number = Infinity\r\n): OperatorFunction<T, ObservedValueOf<O> | R> {\r\n  if (isFunction(resultSelector)) {\r\n    // DEPRECATED PATH\r\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\r\n  } else if (typeof resultSelector === 'number') {\r\n    concurrent = resultSelector;\r\n  }\r\n\r\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\r\n}\r\n"],"mappings":"AACA,SAASA,GAAG,QAAQ,OAAO;AAC3B,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,UAAU,QAAQ,oBAAoB;AA6E/C,OAAM,SAAUC,QAAQA,CACtBC,OAAuC,EACvCC,cAAwH,EACxHC,UAA6B;EAA7B,IAAAA,UAAA;IAAAA,UAAA,GAAAC,QAA6B;EAAA;EAE7B,IAAIL,UAAU,CAACG,cAAc,CAAC,EAAE;IAE9B,OAAOF,QAAQ,CAAC,UAACK,CAAC,EAAEC,CAAC;MAAK,OAAAX,GAAG,CAAC,UAACY,CAAM,EAAEC,EAAU;QAAK,OAAAN,cAAc,CAACG,CAAC,EAAEE,CAAC,EAAED,CAAC,EAAEE,EAAE,CAAC;MAA3B,CAA2B,CAAC,CAACZ,SAAS,CAACK,OAAO,CAACI,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC;IAAlF,CAAkF,EAAEH,UAAU,CAAC;GAC1H,MAAM,IAAI,OAAOD,cAAc,KAAK,QAAQ,EAAE;IAC7CC,UAAU,GAAGD,cAAc;;EAG7B,OAAOL,OAAO,CAAC,UAACY,MAAM,EAAEC,UAAU;IAAK,OAAAZ,cAAc,CAACW,MAAM,EAAEC,UAAU,EAAET,OAAO,EAAEE,UAAU,CAAC;EAAvD,CAAuD,CAAC;AACjG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}