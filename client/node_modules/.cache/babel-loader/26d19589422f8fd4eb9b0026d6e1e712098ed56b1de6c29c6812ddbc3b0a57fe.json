{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar AnimationFrameScheduler = function (_super) {\n  __extends(AnimationFrameScheduler, _super);\n  function AnimationFrameScheduler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  AnimationFrameScheduler.prototype.flush = function (action) {\n    this._active = true;\n    var flushId = this._scheduled;\n    this._scheduled = undefined;\n    var actions = this.actions;\n    var error;\n    action = action || actions.shift();\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n    this._active = false;\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  };\n  return AnimationFrameScheduler;\n}(AsyncScheduler);\nexport { AnimationFrameScheduler };","map":{"version":3,"names":["AsyncScheduler","AnimationFrameScheduler","_super","__extends","prototype","flush","action","_active","flushId","_scheduled","undefined","actions","error","shift","execute","state","delay","id","unsubscribe"],"sources":["C:\\Users\\samka\\OneDrive\\Bureau\\My-Mern-Backend\\client\\node_modules\\rxjs\\src\\internal\\scheduler\\AnimationFrameScheduler.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\r\nimport { AsyncScheduler } from './AsyncScheduler';\r\n\r\nexport class AnimationFrameScheduler extends AsyncScheduler {\r\n  public flush(action?: AsyncAction<any>): void {\r\n    this._active = true;\r\n    // The async id that effects a call to flush is stored in _scheduled.\r\n    // Before executing an action, it's necessary to check the action's async\r\n    // id to determine whether it's supposed to be executed in the current\r\n    // flush.\r\n    // Previous implementations of this method used a count to determine this,\r\n    // but that was unsound, as actions that are unsubscribed - i.e. cancelled -\r\n    // are removed from the actions array and that can shift actions that are\r\n    // scheduled to be executed in a subsequent flush into positions at which\r\n    // they are executed within the current flush.\r\n    const flushId = this._scheduled;\r\n    this._scheduled = undefined;\r\n\r\n    const { actions } = this;\r\n    let error: any;\r\n    action = action || actions.shift()!;\r\n\r\n    do {\r\n      if ((error = action.execute(action.state, action.delay))) {\r\n        break;\r\n      }\r\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\r\n\r\n    this._active = false;\r\n\r\n    if (error) {\r\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\r\n        action.unsubscribe();\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AACA,SAASA,cAAc,QAAQ,kBAAkB;AAEjD,IAAAC,uBAAA,aAAAC,MAAA;EAA6CC,SAAA,CAAAF,uBAAA,EAAAC,MAAA;EAA7C,SAAAD,wBAAA;;EAkCA;EAjCSA,uBAAA,CAAAG,SAAA,CAAAC,KAAK,GAAZ,UAAaC,MAAyB;IACpC,IAAI,CAACC,OAAO,GAAG,IAAI;IAUnB,IAAMC,OAAO,GAAG,IAAI,CAACC,UAAU;IAC/B,IAAI,CAACA,UAAU,GAAGC,SAAS;IAEnB,IAAAC,OAAO,GAAK,IAAI,CAAAA,OAAT;IACf,IAAIC,KAAU;IACdN,MAAM,GAAGA,MAAM,IAAIK,OAAO,CAACE,KAAK,EAAG;IAEnC,GAAG;MACD,IAAKD,KAAK,GAAGN,MAAM,CAACQ,OAAO,CAACR,MAAM,CAACS,KAAK,EAAET,MAAM,CAACU,KAAK,CAAC,EAAG;QACxD;;KAEH,QAAQ,CAACV,MAAM,GAAGK,OAAO,CAAC,CAAC,CAAC,KAAKL,MAAM,CAACW,EAAE,KAAKT,OAAO,IAAIG,OAAO,CAACE,KAAK,EAAE;IAE1E,IAAI,CAACN,OAAO,GAAG,KAAK;IAEpB,IAAIK,KAAK,EAAE;MACT,OAAO,CAACN,MAAM,GAAGK,OAAO,CAAC,CAAC,CAAC,KAAKL,MAAM,CAACW,EAAE,KAAKT,OAAO,IAAIG,OAAO,CAACE,KAAK,EAAE,EAAE;QACxEP,MAAM,CAACY,WAAW,EAAE;;MAEtB,MAAMN,KAAK;;EAEf,CAAC;EACH,OAAAX,uBAAC;AAAD,CAAC,CAlC4CD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}