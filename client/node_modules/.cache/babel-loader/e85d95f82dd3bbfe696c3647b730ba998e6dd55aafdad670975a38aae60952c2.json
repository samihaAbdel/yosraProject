{"ast":null,"code":"import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport function buffer(closingNotifier) {\n  return operate(function (source, subscriber) {\n    var currentBuffer = [];\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      return currentBuffer.push(value);\n    }, function () {\n      subscriber.next(currentBuffer);\n      subscriber.complete();\n    }));\n    innerFrom(closingNotifier).subscribe(createOperatorSubscriber(subscriber, function () {\n      var b = currentBuffer;\n      currentBuffer = [];\n      subscriber.next(b);\n    }, noop));\n    return function () {\n      currentBuffer = null;\n    };\n  });\n}","map":{"version":3,"names":["operate","noop","createOperatorSubscriber","innerFrom","buffer","closingNotifier","source","subscriber","currentBuffer","subscribe","value","push","next","complete","b"],"sources":["C:\\Users\\samka\\OneDrive\\Bureau\\My-Mern-Backend\\client\\node_modules\\rxjs\\src\\internal\\operators\\buffer.ts"],"sourcesContent":["import { OperatorFunction, ObservableInput } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { noop } from '../util/noop';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { innerFrom } from '../observable/innerFrom';\r\n\r\n/**\r\n * Buffers the source Observable values until `closingNotifier` emits.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array, and emits\r\n * that array only when another Observable emits.</span>\r\n *\r\n * ![](buffer.png)\r\n *\r\n * Buffers the incoming Observable values until the given `closingNotifier`\r\n * `ObservableInput` (that internally gets converted to an Observable)\r\n * emits a value, at which point it emits the buffer on the output\r\n * Observable and starts a new buffer internally, awaiting the next time\r\n * `closingNotifier` emits.\r\n *\r\n * ## Example\r\n *\r\n * On every click, emit array of most recent interval events\r\n *\r\n * ```ts\r\n * import { fromEvent, interval, buffer } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const intervalEvents = interval(1000);\r\n * const buffered = intervalEvents.pipe(buffer(clicks));\r\n * buffered.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link bufferCount}\r\n * @see {@link bufferTime}\r\n * @see {@link bufferToggle}\r\n * @see {@link bufferWhen}\r\n * @see {@link window}\r\n *\r\n * @param closingNotifier An `ObservableInput` that signals the\r\n * buffer to be emitted on the output Observable.\r\n * @return A function that returns an Observable of buffers, which are arrays\r\n * of values.\r\n */\r\nexport function buffer<T>(closingNotifier: ObservableInput<any>): OperatorFunction<T, T[]> {\r\n  return operate((source, subscriber) => {\r\n    // The current buffered values.\r\n    let currentBuffer: T[] = [];\r\n\r\n    // Subscribe to our source.\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => currentBuffer.push(value),\r\n        () => {\r\n          subscriber.next(currentBuffer);\r\n          subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n\r\n    // Subscribe to the closing notifier.\r\n    innerFrom(closingNotifier).subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        () => {\r\n          // Start a new buffer and emit the previous one.\r\n          const b = currentBuffer;\r\n          currentBuffer = [];\r\n          subscriber.next(b);\r\n        },\r\n        noop\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      // Ensure buffered values are released on finalization.\r\n      currentBuffer = null!;\r\n    };\r\n  });\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,SAAS,QAAQ,yBAAyB;AAwCnD,OAAM,SAAUC,MAAMA,CAAIC,eAAqC;EAC7D,OAAOL,OAAO,CAAC,UAACM,MAAM,EAAEC,UAAU;IAEhC,IAAIC,aAAa,GAAQ,EAAE;IAG3BF,MAAM,CAACG,SAAS,CACdP,wBAAwB,CACtBK,UAAU,EACV,UAACG,KAAK;MAAK,OAAAF,aAAa,CAACG,IAAI,CAACD,KAAK,CAAC;IAAzB,CAAyB,EACpC;MACEH,UAAU,CAACK,IAAI,CAACJ,aAAa,CAAC;MAC9BD,UAAU,CAACM,QAAQ,EAAE;IACvB,CAAC,CACF,CACF;IAGDV,SAAS,CAACE,eAAe,CAAC,CAACI,SAAS,CAClCP,wBAAwB,CACtBK,UAAU,EACV;MAEE,IAAMO,CAAC,GAAGN,aAAa;MACvBA,aAAa,GAAG,EAAE;MAClBD,UAAU,CAACK,IAAI,CAACE,CAAC,CAAC;IACpB,CAAC,EACDb,IAAI,CACL,CACF;IAED,OAAO;MAELO,aAAa,GAAG,IAAK;IACvB,CAAC;EACH,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}